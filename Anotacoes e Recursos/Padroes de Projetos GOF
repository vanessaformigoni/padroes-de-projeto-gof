Anotações CURSO - Padroes de Projetos GOF - Udemy

Os atributos são as caracteristicas e estados do objeto e os métodos representam as operações e comportamentos do objeto;

O diagrama de classes discrimina uma classe com seus metodos, atributos e açoes. Alem de descrever a relação que as clases podem ou nao ter;

-> Agregação: Tipo de  relacionamento independente do tipo TODO/PARTE, onde o objeto PARTE pode existir mesmo sem o objeto TODO. Ex: Departamento é TODO e funcionaerio PARTE, se o departamento deixar de existir, os funcionarios continuarão a existir;

-> Composição: Relacionamento com alto grau de coesão entre o objeto PARTE e o objeto PARTE. O objeto PARTE nao pode existir ser o objeto TODO.

Os padrões de projetos podem ser dividios em 3 categorias: criacao, estrutural e comportamental. Eles servem para escrever soluções para problemas recorrentes para o desenvolvimento de sistemas Orientado a Objetos.

Os padroes de criação são 05 e servem para situaçÕes na qual envolve-se a criação de objetos ocultando os detalhes da criaçao.

Os padroes estruturais são 07 e servem para se preocupar com a composicao das classes e seus objetos.

Os padroes comportamentais são 11 e espeficiam as comunicação entre objetos.



### PADROES DE CRIAÇÃO 5:


Aplicam-se em situações que envolvem a criação de objetos.
Ajudam a fazer um sistema independente de como seus objetos são criados, compostos e representados.

-> Singleton (1/5 - 4): Tem a intenção de garantir que uma determinada classe tenha uma, e somente uma instância, mantendo um ponto unico global de acesso para a mesma. Quero garantir que só tenha um OBJETO de uma determinada tipo classe dentro da aplicação (Não permitir várias instancias de uma mesma classe). 
Para garantir que só irá existir uma instancia daquela classe, o singleton define o construtor daquela classe com private. Isso impede que o programador tente instanciar a classe através do operador new().

-> Factory Method (1/5 - 5): Tem a intenção de definir uma interface para criar um objeto, mas deixar as subclasses decidirem quais classe instanciar. Cria uma instancia de várias classes derivadas. A essencia desse padrao de projeto factoryMethod é ter uma fábrica para cada tipo de produto e dentro de cada fábrica, tem o método de criação do objeto. A vantagem é que esse padrão permite a criacao de produtos, sem saber os detalhes de como eles são criados ou as dependendias entre os produtos. A gente só precisa informar os dados necessários para cria-los. É uma alternativa para os contrutores. Nesses exemplo, uma fábrica empresaOnibusInterestadual pro produto PassagemOninusIntestadual, e dentro de cada fábrica o método de criação do objeto que é o método emite passagem

-> Abstract Factory (1/5 - 5): Tem a intenção de ornecer uma interface para a criação e familias de objetos relacionados ou dependentes, sem especificar suas classes concretas. Cria uma instancia de várias classes. (Uma fábrica com vários métodos um pra cada produtos). Familia de produtos bem definidos. A expansibilidade so Factory Method é bem maior do que a do Abstract Factory.

-> Builder (1/5 - 2): Tem a inteção de separar a construção de um objeto complexo da sua representação de modo que o mesmo processo de construção possa criar diferentes representações. Separa a contrução do objeto de sua representação. Tem a intenção de encapusular processos complexos de montagem de objetos.

-> Prototype (1/5 -3): Tem a intenção de específicar s tipo de de objeto a serem criados usando uma instancia protótipo e criar novos objetos pela cópia deste protótipo. Uma intancia inicializada a ser copiada ou clonada. Fazer clones de objetos. Objetivo, construir objetos iguais a si mesmo.



### PADROES ESTRUTURAIS 7:


Eles se preocupam com a composição das classes e seus objetos. O conceito de herança é largamente utilizado para compor interfaces e definir mandeiras para compor objetos e obter novas funcionalidades.

-> Bridge (1/5 - 3): Tem a intenção de desacoplar uma abstração da sua implementação de modo que as duas possam variar independentemente. Ou seja, separar a interface do objeto de sua implementação.
//Procurar um exemplo melhor pra botar no gir, o do curso é PÉSSIMO. 

-> Adapter (1/5 - 4): Tem a interção de converter uma interface de uma classe em outra interface, esperada pelos clientes. O adapter permite que as classes com interfaces incompatíveis trabalhem em conjuto o que, de outra forma, seria impossivel. Ou seja, o adapter é utilizado pra adaptar interfaces de diferentes clases. Aparentemente ele ta criando outra classe, que sobreescreve alguns metodos e reaproveitando outros, sobreesvendo de forma que eu consiga usar.

-> Proxy (1/5 - 4): Tem a inteção de fornecer um substituto ou marcador da localização de um outro objeto para controlar o acesso do mesmo. Um objeto representando outro objeto.

-> Decorator (1/5 - 3): Tem a intenção de agregar dinamicamente responsabilidades adicionais a um objeto (em tempo de excução). A motivação do uso do decorator é quando um objeto usado possui funcionalidades básicas mas é necessário adicionar outras funcionalidades em tempo de execução. Ou funcionalidades que devem ser adicionadas a um determinado objeto e não a sua classe. //Entendi foi nada. Péssimo exemplo.

-> Composite (1/5 - 4): Tem a intenção de compor objetos em estruturas de arvore para representarem hierarquias todo-parte. O padrao composite é uma otima saida para compor objetos dentor de uma estrutura de arvore que representa a hierarquia todo parte, e o composite permite que clientes tratem objetos individuais e composições de objetos de maneira uniforme.

-> Facade (1/5 - 5): Tem a intenção de fornecer uma interface unificada para um conjuto de interfaces em um subsistema. Façade define uma interface de nivel mais alto que torna o subsistema mais facil de ser usado. Uma única classe representa o subsistema inteiro. Ele envelopa detalhes mais complicados do subsistema criando uma interface mais simples para o usuário. No exemplo,(em vex de deixar exposto ao cliente, criamos uma "fachada com os tres metodoso"). Com essa fachada eu consigo escolher, quais metodos de outras classes o cliente poderá acessar. Uma consequencia é a baixa coesão por ele fazer uma grande quantidade de tarefas. A classe fica sobrecarregada.

-> flyweight (1/5 - 1): Usar compartilhamento para suportar eficientemente grandes quantidades de objetos de granularidade fina.


### PADROES COMPORTAMENTAIS 11:


Eles são especificamentes relacionados com a comunicação entre objetos.

-> Command (1/5 - 4): Tem a intenção de encapsular comandos como objetos. No padrão command existe uma classe chamada Invoker que armazena o historico de todos os comandos. (Neste exemplo, ele foi empilhando as informaçÕes).

-> Strategy (1/5 - 4): Tem a inteção de definir uma familia de algoritmos, encapsular cada uma delas e tornalas intercambiáveis. Emcapsular algoritmos (estratégias) como um objeto - independentemente dos clientes que o utilizam. Neste exemplo encapusulamos algorimos de ordenação como classes. Posso mudar o a estrategia de ordenação sem precisar criar um novo objeto e intanciar, posso usar o mesmo. Posso mudar o algoritmo sem precisar mexer no objeto que quero mudar.

-> State (1/5 - 3): Tem a intenção de permitir a um objeto alterar seu comportamento quando seu estado interno muda.

-> Observer (1/5 - 5): Definir uma dependencia um-para-muitos entre objetos, de maneira que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente. Temos dois conceitos importantes: obj observador (devem conhecer o objeto de interesse) e obj observado (deve notificado os observadores quando este for atualizado). Carro policia/carro roubado. A classe observador tem que implementar a interface Observer e sobrecrer os metodos. Esta interface foi descontinuada. Consulte a classe Observable para obter mais informações. A classe observada tem que extender a classe observable. O metodo notify e update estão conectados entres eles.

-> Mediator (1/5 -2): Tem a intenção de definir uma comunicação simplificada entre as classes. A comunicação entre as classes é encapsulada em um objeto chamado mediador, reduzindo a dependencia entre os objetos que estão se comunicanco.  

-> Chain of Responsability (1/5 -2): Tem a inteção de encadear os objetos receptores, passando a solicitação ao longo da cadeia até que um objeto a trate. Uma maneira de passar uma requisição entre uma cadeia de objetos. A grande sacada é o TomadorDeDecisao ter uma variavel chamada TomadorDeDecisao que diz qual será o sucessor - como se fosse ponteiros. Representa um encadeamento de objetos receptores para o processamento de uma série de solicitações diferentes. E esses objetos receptores vão passando a solicitação ao longo da cadeira até ser tratado. 

-> Template Method (1/5 -3): Tem a intenção de definir o esqueleto de um algoritimo em uma operação, postergando alguns passos para as subclasses. Esse padrao de projeto fornece uma estrutura fixa que é presente na superclasse como nas classes filhas e a superClasse tem o metodo concreto que é o template Method.

-> Interpreter (1/5 - 1): Uma forma de incluir elementos da linguagem em um programa fazendo uso de classes para representar cada regra de uma gramatica (expressao regular). - Rever melhor

-> Memento (1/5 -1): Tem a inteção de salvar o estado de um objeto sem violar o encapsulamento do objeto. O memento tem as mesmas informações que a classe que ele deseja salvar. Salva o estado interno de um objeto pra depois recuperar. 